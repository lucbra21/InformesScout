import streamlit as st
import pandas as pd
import json
import os
from datetime import datetime, date
from fpdf import FPDF
import matplotlib.pyplot as plt
import numpy as np

# === LOGIN CON ROLES ===
USERS = {
    "admin": {"password": "admin", "role": "admin"},
    "scout": {"password": "scout123", "role": "scout"}
}

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.role = None

if not st.session_state.logged_in:
    # Centrar contenido
    col1, col2, col3 = st.columns([1,6,1])
    with col2:
        # Mostrar logo si existe
        logo_path = "ud_lanzarote_logo3.png"
        if os.path.exists(logo_path):
            st.image(logo_path, width=200)
        st.title("Scouting UD Lanzarote")
        usuario = st.text_input("Usuario")
        contrase√±a = st.text_input("Contrase√±a", type="password")
        if st.button("Iniciar sesi√≥n"):
            if usuario in USERS and contrase√±a == USERS[usuario]["password"]:
                st.session_state.logged_in = True
                st.session_state.role = USERS[usuario]["role"]
                st.success(f"‚úÖ Bienvenido, {usuario} ({st.session_state.role})")
                st.rerun()
            else:
                st.error("‚ùå Usuario o contrase√±a incorrectos")
        st.stop()


# === CONFIGURACI√ìN ===
DATA_DIR = "."  # Carpeta donde est√°n los .json
TABLES = ["Posiciones", "Scouts", "Jugadores", "Informes"]

# Lista de atributos valorables
ATRIBUTOS_VALORABLES = [
    "Juego con los pies", "Juego a√©reo", "Reflejos (Bajo palos)", "Blocajes",
    "Salidas (mano a mano)", "Despejes", "Velocidad de reacci√≥n", "Colocaci√≥n",
    "Salida de bal√≥n (corto)", "Salida de bal√≥n (largo)", "Duelos", "Duelos a√©reos",
    "Resistencia", "Velocidad", "Precisi√≥n en el pase corto", "Precisi√≥n en el pase largo",
    "Llegada al √°rea rival", "Presi√≥n", "Desmarques", "Desborde", "Gol", "Descargas",
    "Remate de cabeza", "Disparos", "Presi√≥n mental", "Liderazgo"
]

# Lista de atributos estad√≠sticos (porcentajes)
ATRIBUTOS_PORCENTAJE = [
    "% Duelos ganados",
    "% Duelos a√©reos ganados",
    "% Pases cortos acertados",
    "% Pases largos acertados",
    "% Disparos a puerta"
]

# FUNCIONES AUXILIARES #
def load_table(table_name):
    path = os.path.join(DATA_DIR, f"{table_name}.json")
    os.makedirs(DATA_DIR, exist_ok=True)
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            json.dump([], f)
    with open(path, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
        except json.JSONDecodeError:
            data = []
    if data:
        fields_list = [record.get("fields", {}) for record in data]
        df = pd.DataFrame(fields_list)
    else:
        df = pd.DataFrame()
    return df, path

def save_table(df, path):
    # Asegurarse de guardar strings (no NaN) y registros limpios
    records = [{"fields": row.dropna().to_dict()} for _, row in df.iterrows()]
    with open(path, "w", encoding="utf-8") as f:
        json.dump(records, f, ensure_ascii=False, indent=4)

def add_new_record(table_name, new_record):
    df, path = load_table(table_name)
    df = pd.concat([df, pd.DataFrame([new_record])], ignore_index=True)
    save_table(df, path)

# INICIALIZAR session_state para formularios persistentes #
if "show_create_player_form" not in st.session_state:
    st.session_state.show_create_player_form = False
if "show_create_report_form" not in st.session_state:
    st.session_state.show_create_report_form = False

#  FUNCI√ìN DE GENERACI√ìN DE PDF (FPDF2) #
def generar_pdf(informe, logo_path="ud_lanzarote_logo.png"):
    """
    Genera un PDF con encabezado diferenciado, escudo, l√≠nea divisoria,
    tabla de atributos, tabla de estad√≠sticas y bloque de observaciones.
    Devuelve la ruta del fichero generado.
    """
    # Nombre de fichero (reemplazamos espacios por guiones)
    jugador_safe = str(informe.get("Jugador", "desconocido")).replace(" ", "_")
    fecha_safe = str(informe.get("Fecha informe", datetime.today().strftime("%Y-%m-%d")))
    file_name = f"Informe_{jugador_safe}_{fecha_safe}.pdf"
    pdf = FPDF(unit="mm", format="A4")
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()

    # P√°gina y dimensiones
    page_w = pdf.w - 2 * pdf.l_margin  # ancho
    left_x = pdf.l_margin

    # Encabezado con fondo claro
    header_h = 30
    pdf.set_fill_color(245, 245, 245)  # color fondo encabezado
    pdf.rect(left_x - 1, 10, page_w + 2, header_h, style="F")  # rect√°ngulo de fondo

    # Logo (si existe)
    if os.path.exists(logo_path):
        try:
            logo_w = 36
            logo_h = 36
            pdf.image(logo_path, left_x + 2, 2.5, logo_w, logo_h)
        except Exception:
            # si hay problema con imagen, ignoramos
            pass

    # T√≠tulo centralizado dentro del encabezado
    pdf.set_xy(left_x, 12)
    pdf.set_font("Arial", "B", 16)
    title = f"Informe de Jugador"
    pdf.cell(page_w, 7, title, ln=1, align="C")

    # Nombre del jugador (debajo del t√≠tulo)
    pdf.set_font("Arial", "B", 14)
    jugador_text = informe.get("Jugador", "")
    pdf.cell(page_w, 8, jugador_text, ln=1, align="C")

    # Subt√≠tulo con fecha y scout
    pdf.set_font("Arial", "", 11)
    subt = f"Fecha: {informe.get('Fecha informe','')}    -    Scout: {informe.get('Scout','')}"
    pdf.cell(page_w, 6, subt, ln=1, align="C")

    pdf.ln(6)

    # L√≠nea divisoria de color (roja)
    pdf.set_draw_color(200, 0, 0)
    pdf.set_line_width(0.8)
    y_line = pdf.get_y()
    pdf.line(left_x, y_line, left_x + page_w, y_line)
    pdf.ln(6)

    # Atributos valorables: cabecera de tabla (En futuro igual meter estrellas? + visual)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 8, " Atributos valorables", ln=1)
    pdf.ln(2)

    # Table layout
    name_col = int(page_w * 0.75)  # columna nombre atributo
    val_col = int(page_w * 0.25)   # columna valor
    row_h = 8

    # Cabecera de la tabla
    pdf.set_font("Arial", "B", 10)
    pdf.set_fill_color(230, 230, 230)
    pdf.cell(name_col, row_h, "Atributo", border=1, fill=True)
    pdf.cell(val_col, row_h, "Valor (0-5)", border=1, fill=True, ln=1)

    # Filas: usamos multi_cell para el nombre por si se parte
    pdf.set_font("Arial", "", 10)
    for attr in ATRIBUTOS_VALORABLES:
        val = informe.get(attr, "")
        if str(val).strip() != "" and str(val) not in ["0", "0.0"]:
            x_before = pdf.get_x()
            y_before = pdf.get_y()
            pdf.multi_cell(name_col, row_h, str(attr), border=1)
            y_after_name = pdf.get_y()
            pdf.set_xy(left_x + name_col, y_before)
            pdf.multi_cell(val_col, row_h, str(val), border=1, align="C")
            pdf.set_xy(left_x, max(y_after_name, pdf.get_y()))
    pdf.ln(6)
           
    # Estad√≠sticas / porcentajes 
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 8, " Estad√≠sticas", ln=1)
    pdf.ln(2)

    # Cabecera tabla estad√≠sticas
    pdf.set_font("Arial", "B", 10)
    pdf.set_fill_color(230, 230, 230)
    pdf.cell(name_col, row_h, "Indicador", border=1, fill=True)
    pdf.cell(val_col, row_h, "Valor", border=1, fill=True, ln=1)

    pdf.set_font("Arial", "", 10)
    for stat in ATRIBUTOS_PORCENTAJE:
        val = informe.get(stat, "")
        if str(val).strip() != "" and str(val) not in ["0", "0.0"]:   # üëà filtro
            x_before = pdf.get_x()
            y_before = pdf.get_y()
            pdf.multi_cell(name_col, row_h, str(stat), border=1)
            y_after_name = pdf.get_y()
            pdf.set_xy(left_x + name_col, y_before)
            pdf.multi_cell(val_col, row_h, f"{val}%", border=1, align="C")
            pdf.set_xy(left_x, max(y_after_name, pdf.get_y()))
    pdf.ln(8)
        
    # Observaciones
    obs = informe.get("Observaciones", "")
    if obs:
        pdf.set_font("Arial", "B", 12)
        pdf.cell(0, 8, " Observaciones", ln=1)
        pdf.ln(2)
        pdf.set_font("Arial", "", 11)
        pdf.multi_cell(0, 6, obs)

    # Guardar fichero
    pdf.output(file_name)
    return file_name

# === INTERFAZ STREAMLIT ===
st.set_page_config(page_title="Scouting UD Lanzarote", layout="wide")
st.title("üìä Scouting   UD Lanzarote")

# Sidebar - SOLO las 4 tablas principales
# === LOGO EN LA SIDEBAR ===
logo_path = "ud_lanzarote_logo3.png"  # Aseg√∫rate de que este archivo est√° en la misma carpeta que el app.py
if os.path.exists(logo_path):
    st.sidebar.image(logo_path, width=160)
st.sidebar.title("Men√∫")
# Men√∫ lateral seg√∫n rol
if st.session_state.role == "admin":
    menu = st.sidebar.radio("", TABLES + ["Formulario", "Radar"])
elif st.session_state.role == "scout":
    menu = st.sidebar.radio("", ["Formulario"])
# --- Bot√≥n de Cerrar sesi√≥n ---
if st.sidebar.button("üö™ Cerrar sesi√≥n"):
    st.session_state.logged_in = False
    st.session_state.role = None
    st.rerun()
# Cargar la tabla seleccionada
df, path = load_table(menu)

# ---------------------------
# CREAR SCOUT (form persistente con session_state)
# ---------------------------
if menu == "Scouts":
    # Inicializar flag en session_state
    if "show_create_scout_form" not in st.session_state:
        st.session_state.show_create_scout_form = False

    # Bot√≥n para abrir formulario
    if st.button("‚ûï Nuevo Scout"):
        st.session_state.show_create_scout_form = True

    # Mostrar formulario si el flag est√° activo
    if st.session_state.show_create_scout_form:
        with st.form("form_crear_scout"):
            st.write("### ‚úèÔ∏è Nuevo Scout")

            nuevo_scout = {}
            scouts_df, _ = load_table("Scouts")

            # Si la tabla est√° vac√≠a, ponemos un campo por defecto
            columnas = scouts_df.columns.tolist() if not scouts_df.empty else ["Nombre scout"]

            # Generamos din√°micamente inputs seg√∫n las columnas
            for col_name in columnas:
                # Si la columna parece de fecha, usar date_input
                if "fecha" in col_name.lower():
                    valor = st.date_input(col_name, value=date.today(), key=f"ns_{col_name}")
                    nuevo_scout[col_name] = valor.strftime("%Y-%m-%d")
                else:
                    # texto por defecto
                    valor = st.text_input(col_name, key=f"ns_{col_name}")
                    nuevo_scout[col_name] = valor

            # Botones Guardar / Cancelar
            col_guardar, col_cancelar = st.columns(2)
            guardar = col_guardar.form_submit_button("‚úÖ Guardar scout")
            cancelar = col_cancelar.form_submit_button("‚ùå Cancelar")

            if guardar:
                # Validaci√≥n m√≠nima: nombre obligatorio
                if not str(nuevo_scout.get("Nombre scout", "")).strip():
                    st.error("El nombre del scout es obligatorio.")
                else:
                    add_new_record("Scouts", nuevo_scout)
                    st.success(f"Scout '{nuevo_scout['Nombre scout']}' a√±adido correctamente ‚úÖ")
                    st.session_state.show_create_scout_form = False
                    st.rerun()

            if cancelar:
                st.session_state.show_create_scout_form = False
                st.rerun()

# ---------------------------
# CREAR JUGADOR (form persistente con session_state)
# ---------------------------
if menu == "Jugadores":
    # bot√≥n para abrir el formulario
    if st.button("‚ûï Crear jugador"):
        st.session_state.show_create_player_form = True

    # mostrar el formulario si el flag est√° activo
    if st.session_state.show_create_player_form:
        with st.form("form_crear_jugador"):
            st.write("### ‚úèÔ∏è Nuevo jugador")

            nuevo_jugador = {}
            nuevo_jugador["Nombre jugador"] = st.text_input("Nombre jugador", key="nj_nombre")
            # Guardamos fecha en formato YYYY-MM-DD
            fecha_nac = st.date_input(
                "Fecha de nacimiento",
                min_value=date(1900, 1, 1),
                value=date.today(),
                max_value=date.today(),
                key="nj_fecha"
            )
            nuevo_jugador["Fecha de nacimiento"] = fecha_nac.strftime("%Y-%m-%d")
            nuevo_jugador["Club"] = st.text_input("Club", key="nj_club")
            nuevo_jugador["Sub 23"] = st.selectbox("Sub 23", ["S√≠", "No"], key="nj_sub23")

            col_guardar, col_cancelar = st.columns(2)
            guardar = col_guardar.form_submit_button("‚úÖ Guardar jugador")
            cancelar = col_cancelar.form_submit_button("‚ùå Cancelar")

            if guardar:
                if not str(nuevo_jugador["Nombre jugador"]).strip():
                    st.error("El nombre del jugador es obligatorio.")
                else:
                    add_new_record("Jugadores", nuevo_jugador)
                    st.success(f"Jugador '{nuevo_jugador['Nombre jugador']}' a√±adido correctamente ‚úÖ")
                    st.session_state.show_create_player_form = False
                    # forzar recarga para que la tabla se actualice
                    st.rerun()

            if cancelar:
                st.session_state.show_create_player_form = False
                st.rerun()

# ---------------------------
# CREAR FORMULARIO (form persistente)
# ---------------------------
if menu == "Formulario":
    st.subheader("üìù Crear informes")
    col_nuevo, col_nuevo_unreg = st.columns(2)

    if col_nuevo.button("üìù Nuevo informe de jugador registrado"):
        st.session_state.show_create_report_form = True
        st.session_state.show_create_unreg_report_form = False

    if col_nuevo_unreg.button("üìù Nuevo informe de jugador no registrado"):
        st.session_state.show_create_unreg_report_form = True
        st.session_state.show_create_report_form = False
    # ---------------------------
    # Formulario normal (jugador registrado)
    # ---------------------------
    if st.session_state.get("show_create_report_form", False):
        with st.form("form_crear_informe"):
            st.write("### üìã Nuevo informe de jugador (registrado)")

            if df.empty:
                columnas = ["Fecha informe", "Scout","Temporada", "Competici√≥n", "Equipo local", "Equipo visitante", "Jugador", "Posici√≥n", "Lateralidad", "Acci√≥n", "Observaciones"] + ATRIBUTOS_VALORABLES + ATRIBUTOS_PORCENTAJE

            else:
                columnas = df.columns.tolist()
            scouts_df, _ = load_table("Scouts")
            jugadores_df, _ = load_table("Jugadores")
            posiciones_df, _ = load_table("Posiciones")

            nuevo_informe = {}

            # Fecha del informe (siempre arriba)
            fecha_informe = st.date_input("Fecha del informe", value=date.today(), key="ni_fecha")
            nuevo_informe["Fecha informe"] = fecha_informe.strftime("%Y-%m-%d")

            # Campos descriptivos (en una sola columna)
            campos_descriptivos = [
                col for col in columnas
                if col not in ["Sub 23", "Fecha de nacimiento", "Club", "Acci√≥n", "Observaciones", "Fecha informe"]
                + ATRIBUTOS_VALORABLES + ATRIBUTOS_PORCENTAJE
            ]
            for idx, col_name in enumerate(campos_descriptivos):
                low = col_name.lower()
                if low == "scout" and not scouts_df.empty:
                    nuevo_informe[col_name] = st.selectbox(f"{col_name}:", scouts_df["Nombre scout"].dropna().unique(), key=f"ni_scout_{idx}")
                elif low == "jugador" and not jugadores_df.empty:
                    jugador_sel = st.selectbox(f"{col_name}:", jugadores_df["Nombre jugador"].dropna().unique(), key=f"ni_jugador_{idx}")
                    nuevo_informe[col_name] = jugador_sel
                    # auto-completar
                    fila = jugadores_df.loc[jugadores_df["Nombre jugador"] == jugador_sel]
                    if not fila.empty:
                        if "Sub 23" in jugadores_df.columns:
                            nuevo_informe["Sub 23"] = fila["Sub 23"].values[0]
                        if "Fecha de nacimiento" in jugadores_df.columns:
                            nuevo_informe["Fecha de nacimiento"] = fila["Fecha de nacimiento"].values[0]
                        if "Club" in jugadores_df.columns:
                            nuevo_informe["Club"] = fila["Club"].values[0]
                elif low == "posici√≥n" and not posiciones_df.empty:
                    nuevo_informe[col_name] = st.selectbox(f"{col_name}:", posiciones_df.iloc[:, 0].dropna().unique(), key=f"ni_pos_{idx}")
                elif low == "lateralidad":
                    nuevo_informe[col_name] = st.selectbox(f"{col_name}:", ["Diestro", "Zurdo", "Ambas"], key=f"ni_lat_{idx}")
                else:
                    nuevo_informe[col_name] = st.text_input(f"{col_name}:", key=f"ni_txt_{idx}")

            # Atributos (sliders) en 3 columnas
            atributos = [a for a in columnas if a in ATRIBUTOS_VALORABLES]
            if atributos:
                st.markdown("#### ‚ö° Atributos valorables")
                num_cols = 3
                cols_sl = st.columns(num_cols)
                for idx, attr in enumerate(atributos):
                    c = cols_sl[idx % num_cols]
                    nuevo_informe[attr] = c.slider(attr, 0, 5, 0, 1, key=f"ni_attr_{idx}")

            # Porcentajes (2 columnas)
            porcentajes = [a for a in columnas if a in ATRIBUTOS_PORCENTAJE]
            if porcentajes:
                st.markdown("#### üìä Estad√≠sticas")
                c1, c2 = st.columns(2)
                for idx, stat in enumerate(porcentajes):
                    target = c1 if idx % 2 == 0 else c2
                    nuevo_informe[stat] = target.number_input(stat, min_value=0, max_value=100, step=1, key=f"ni_pct_{idx}")

            # Acci√≥n y Observaciones
            if "Acci√≥n" in columnas:
                nuevo_informe["Acci√≥n"] = st.selectbox("Acci√≥n:", ["Fichar", "Descartar", "Seguir ojeando"], key="ni_accion")
            if "Observaciones" in columnas:
                nuevo_informe["Observaciones"] = st.text_area("Observaciones:", height=120, key="ni_obs")

            col_save, col_cancel = st.columns(2)
            guardar = col_save.form_submit_button("‚úÖ Guardar informe")
            cancelar = col_cancel.form_submit_button("‚ùå Cancelar")

            if guardar and nuevo_informe:
                add_new_record("Informes", nuevo_informe)
                st.success("Nuevo informe a√±adido correctamente ‚úÖ")
                st.session_state.show_create_report_form = False
                st.rerun()

            if cancelar:
                st.session_state.show_create_report_form = False
                st.rerun()


    # ---------------------------
    # Formulario alternativo (jugador no registrado)
    # ---------------------------
    if st.session_state.get("show_create_unreg_report_form", False):
        with st.form("form_crear_informe_unreg"):
            st.write("### üìã Nuevo informe de jugador **no registrado**")

            nuevo_informe = {}

            # Fecha del informe
            fecha_informe = st.date_input("Fecha del informe", value=date.today(), key="niu_fecha")
            nuevo_informe["Fecha informe"] = fecha_informe.strftime("%Y-%m-%d")

                # Scout
            scouts_df, _ = load_table("Scouts")
            if not scouts_df.empty:
                nuevo_informe["Scout"] = st.selectbox("Scout:", scouts_df["Nombre scout"].dropna().unique(), key="niu_scout")

            # Datos manuales del jugador
            nuevo_informe["Temporada"] = st.text_input("Temporada", key="niu_temporada")
            nuevo_informe["Competici√≥n"] = st.text_input("Competici√≥n", key="niu_competicion")
            nuevo_informe["Equipo local"] = st.text_input("Equipo local", key="niu_local")
            nuevo_informe["Equipo visitante"] = st.text_input("Equipo visitante", key="niu_visitante")
            nuevo_informe["Jugador"] = st.text_input("Nombre jugador", key="niu_jugador")
            fecha_nac = st.date_input("Fecha de nacimiento", min_value=date(1900,1,1), max_value=date.today(), value=date.today(), key="niu_fnac")
            nuevo_informe["Fecha de nacimiento"] = fecha_nac.strftime("%Y-%m-%d")
            nuevo_informe["Club"] = st.text_input("Club", key="niu_club")
            nuevo_informe["Sub 23"] = st.selectbox("Sub 23", ["S√≠", "No"], key="niu_sub23")

            # Posici√≥n
            posiciones_df, _ = load_table("Posiciones")
            if not posiciones_df.empty:
                nuevo_informe["Posici√≥n"] = st.selectbox("Posici√≥n:", posiciones_df.iloc[:, 0].dropna().unique(), key="niu_pos")

            # Lateralidad
            nuevo_informe["Lateralidad"] = st.selectbox("Lateralidad:", ["Diestro", "Zurdo", "Ambas"], key="niu_lat")

            # Atributos (sliders)
            st.markdown("#### ‚ö° Atributos valorables")
            num_cols = 3
            cols_sl = st.columns(num_cols)
            for idx, attr in enumerate(ATRIBUTOS_VALORABLES):
                nuevo_informe[attr] = cols_sl[idx % num_cols].slider(attr, 0, 5, 0, 1, key=f"nr_attr_{idx}")

            # Porcentajes
            porcentajes = [a for a in df.columns if a in ATRIBUTOS_PORCENTAJE]
            if porcentajes:
                st.markdown("#### üìä Estad√≠sticas")
                c1, c2 = st.columns(2)
                for idx, stat in enumerate(porcentajes):
                    target = c1 if idx % 2 == 0 else c2
                    nuevo_informe[stat] = target.number_input(stat, min_value=0, max_value=100, step=1, key=f"niu_pct_{idx}")

            # Acci√≥n y Observaciones
            nuevo_informe["Acci√≥n"] = st.selectbox("Acci√≥n:", ["Fichar", "Descartar", "Seguir ojeando"], key="niu_accion")
            nuevo_informe["Observaciones"] = st.text_area("Observaciones:", height=120, key="niu_obs")

            col_save, col_cancel = st.columns(2)
            guardar = col_save.form_submit_button("‚úÖ Guardar informe")
            cancelar = col_cancel.form_submit_button("‚ùå Cancelar")

            if guardar and nuevo_informe.get("Jugador", "").strip():
                # Guardar informe en Informes
                add_new_record("Informes", nuevo_informe)

                # Guardar tambi√©n el jugador en la tabla Jugadores si no existe
                jugadores_df, jugadores_path = load_table("Jugadores")
                nombre_jugador = nuevo_informe["Jugador"]

                if "Nombre jugador" in jugadores_df.columns:
                    ya_existe = nombre_jugador in jugadores_df["Nombre jugador"].values
                else:
                    ya_existe = False

                if not ya_existe:
                    nuevo_jugador = {
                        "Nombre jugador": nombre_jugador,
                        "Fecha de nacimiento": nuevo_informe.get("Fecha de nacimiento", ""),
                        "Club": nuevo_informe.get("Club", ""),
                        "Sub 23": nuevo_informe.get("Sub 23", "")
                    }
                    add_new_record("Jugadores", nuevo_jugador)

                st.success("Nuevo informe (jugador no registrado) a√±adido correctamente ‚úÖ")
                st.session_state.show_create_unreg_report_form = False
                st.rerun()
            if cancelar:
                st.session_state.show_create_unreg_report_form = False
                st.rerun()

# ---------------------------
# MOSTRAR / EDITAR TABLAS SEG√öN PESTA√ëA
# ---------------------------
df, path = load_table(menu)
if menu in ["Posiciones", "Jugadores", "Scouts"]:
    # Subt√≠tulo y tabla normales
    st.subheader(f"Datos de {menu}")
    edited_df = st.data_editor(
        df,
        num_rows="dynamic",
        use_container_width=True,
        key=f"data_editor_{menu}"
    )
    if st.button("üíæ Guardar cambios", key=f"save_{menu}"):
        save_table(edited_df, path)
        st.success(f"{menu} actualizado correctamente ‚úÖ")
        st.rerun()
elif menu == "Informes":
    # Bot√≥n "Nuevo informe" ya est√° definido antes
    if not df.empty:
        st.markdown("---")
        st.markdown("### üìã Lista de Informes")
        # ---------------------------
        # FILTROS
        # ---------------------------
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            scout_filter = st.multiselect(
                "Scout",
                sorted(df["Scout"].dropna().unique()) if "Scout" in df.columns else [],
                key="filter_scout"
            )
        with col2:
            jugador_filter = st.multiselect(
                "Jugador",
                sorted(df["Jugador"].dropna().unique()) if "Jugador" in df.columns else [],
                key="filter_jugador"
            )
        with col3:
            sub23_filter = st.multiselect(
                "Sub 23",
                sorted(df["Sub 23"].dropna().unique()) if "Sub 23" in df.columns else [],
                key="filter_sub23"
            )
        with col4:
            posicion_filter = st.multiselect(
                "Posici√≥n",
                sorted(df["Posici√≥n"].dropna().unique()) if "Posici√≥n" in df.columns else [],
                key="filter_posicion"
            )
        with col5:
            accion_filter = st.multiselect(
                "Acci√≥n",
                sorted(df["Acci√≥n"].dropna().unique()) if "Acci√≥n" in df.columns else [],
                key="filter_accion"
            )
        # ---------------------------
        # FILTRADO DE DATOS
        # ---------------------------
        df_filtrado = df.copy()
        if scout_filter and "Scout" in df.columns:
            df_filtrado = df_filtrado[df_filtrado["Scout"].isin(scout_filter)]
        if jugador_filter and "Jugador" in df.columns:
            df_filtrado = df_filtrado[df_filtrado["Jugador"].isin(jugador_filter)]
        if sub23_filter and "Sub 23" in df.columns:
            df_filtrado = df_filtrado[df_filtrado["Sub 23"].isin(sub23_filter)]
        if posicion_filter and "Posici√≥n" in df.columns:
            df_filtrado = df_filtrado[df_filtrado["Posici√≥n"].isin(posicion_filter)]
        if accion_filter and "Acci√≥n" in df.columns:
            df_filtrado = df_filtrado[df_filtrado["Acci√≥n"].isin(accion_filter)]
        # ---------------------------
        # DATA EDITOR CON KEY √öNICO
        # ---------------------------
        edited_df = st.data_editor(
            df_filtrado,
            num_rows="dynamic",
            use_container_width=True,
            key="data_editor_Informes"
        )
        # ---------------------------
        # BOT√ìN GUARDAR
        # ---------------------------
        if st.button("üíæ Guardar cambios", key="save_Informes"):
            save_table(edited_df, path)
            st.success("Informes actualizado correctamente ‚úÖ")
            st.rerun()
    else:
        st.info("No hay informes disponibles.")
else:  # Radar
    # No mostramos tabla ni subt√≠tulo
    edited_df = df  # para que el resto del c√≥digo no falle
# ---------------------------
# EXPORTAR A PDF (solo en Informes)
# ---------------------------
if menu == "Informes" and not df.empty:
    st.markdown("---")
    st.markdown("### üì§ Exportar informe a PDF")
    # Elegir informe por √≠ndice (evita ambig√ºedades si hay varios informes para el mismo jugador)
    index_options = df.index.tolist()
    sel_index = st.selectbox(
        "Selecciona el informe:",
        index_options,
        format_func=lambda i: f"{i} ‚Äî {df.loc[i].get('Jugador','')} ‚Äî {df.loc[i].get('Fecha informe','')}"
    )
    if st.button("üìÑ Generar PDF"):
        informe_dict = df.loc[sel_index].to_dict()
        try:
            pdf_path = generar_pdf(informe_dict)
            with open(pdf_path, "rb") as f:
                st.download_button(
                    label="‚¨áÔ∏è Descargar PDF",
                    data=f,
                    file_name=os.path.basename(pdf_path),
                    mime="application/pdf"
                )
        except Exception as e:
            st.error(f"Error generando PDF: {e}")
# === NUEVA PESTA√ëA RADAR ===
if menu == "Radar":
    st.subheader("üìä Radar de atributos")
    # Cargar jugadores e informes
    jugadores, _ = load_table("Jugadores")
    informes, _ = load_table("Informes")
    if jugadores.empty or informes.empty:
        st.warning("No hay jugadores o informes disponibles todav√≠a.")
    else:
        # Selector de jugador
        jugador_seleccionado = st.selectbox(
            "Selecciona un jugador:",
            jugadores["Nombre jugador"].dropna().unique()
        )
        # Fila de informe m√°s reciente para el jugador
        informe_jugador = informes[informes["Jugador"] == jugador_seleccionado]
        if informe_jugador.empty:
            st.warning(f"No hay informes para {jugador_seleccionado}")
        else:
            datos_jugador = informe_jugador.iloc[-1]  # √∫ltimo informe
            # === Dividir atributos ===
            atributos_portero = [
            "Juego con los pies",
            "Juego a√©reo","Reflejos (Bajo palos)",
            "Blocajes",
            "Salidas (mano a mano)",
            "Despejes",
            "Velocidad de reacci√≥n",
            "Colocaci√≥n"
            ]
            atributos_defensa = [
            "Salida de bal√≥n (corto)",
            "Salida de bal√≥n (largo)",
            "Duelos",
            "Duelos a√©reos",
            "Resistencia",
            "Velocidad",
            "Precisi√≥n en el pase corto",
            "Precisi√≥n en el pase largo",
            "Presi√≥n mental",
            "Liderazgo"     
            ]
            atributos_medios = [
            "Colocaci√≥n",
            "Salida de bal√≥n (corto)",
            "Salida de bal√≥n (largo)",
            "Duelos",
            "Duelos a√©reos",
            "Resistencia",
            "Velocidad",
            "Precisi√≥n en el pase corto",
            "Precisi√≥n en el pase largo",
            "Llegada al √°rea rival",
            "Presi√≥n mental",
            "Liderazgo"                
            ]
            atributos_ataque = [
            "Resistencia",
            "Velocidad",
            "Presi√≥n",
            "Desmarques",
            "Desborde",
            "Gol",
            "Descargas",
            "Remate de cabeza",
            "Disparos",
            "Presi√≥n mental",
            "Liderazgo",   
            ]
            grupo = st.radio("Selecciona grupo de atributos:",["Porteros", "Defensas", "Mediocampistas", "Atacantes"])
            if grupo == "Porteros":
                atributos = atributos_portero
            elif grupo == "Defensas":
                atributos = atributos_defensa
            elif grupo == "Mediocampistas":
                atributos = atributos_medios
            else:
                atributos = atributos_ataque
            if st.button("üéØ Generar radar"):
                # Filtrar valores
                valores = [float(datos_jugador.get(attr, 0)) for attr in atributos]
                # Crear gr√°fico radar
                N = len(atributos)
                valores += valores[:1]  # cerrar el pol√≠gono
                angles = np.linspace(0, 2*np.pi, N, endpoint=False).tolist()
                angles += angles[:1]

                fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

                ax.plot(angles, valores, linewidth=2, linestyle='solid')
                ax.fill(angles, valores, alpha=0.25)

                ax.set_xticks(angles[:-1])
                ax.set_xticklabels(atributos, fontsize=9)
                ax.set_yticks(range(0, 6))  # porque tus sliders son de 0 a 5
                ax.set_title(f"Radar de {jugador_seleccionado}", size=14, weight="bold")
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    st.pyplot(fig)

